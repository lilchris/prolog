eliza :-
    writeln('Hola, mi nombre es Eliza, tu chatbot.'),
    writeln('Por favor, ingresa tu consulta (usar solo minúsculas sin punto al final):'),
    read_line_as_list(Input),
    eliza(Input), !.

%% Caso de salida: el usuario dice "adios"
eliza(Input) :-
    maplist(downcase_atom, Input, LowerInput),
    LowerInput = ['adios'],
    writeln('Adios. Espero poder haberte ayudado.'), !.

% Respuesta por defecto
eliza(Input) :-
    template(Stim, Resp, IndStim),
    match(Stim, Input),
    % Si se encuentra un template, procesar la respuesta
    replace0(IndStim, Input, 0, Resp, R),
    writeln(R),
    read_line_as_list(Input1),
    eliza(Input1), !.

%       Templates definidos
%Familia
template([eliza, quien, es, el, abuelo, paterno, de, s(_)], [flag_pat_abuelo], [7]).
template([eliza, quien, es, el, abuelo, materno, de, s(_)], [flag_mat_abuelo], [7]).
template([eliza, quien, es, la, abuela, paterna, de, s(_)], [flag_pat_abuela], [7]).
template([eliza, quien, es, la, abuela, materna, de, s(_)], [flag_mat_abuela], [7]).
template([eliza, quienes, son, los, abuelos, de, s(_)], [flag_abuelos], [6]).
template([eliza, quien, es, el, hijo, de, s(_)], [flag_hijo], [6]).
template([eliza, quien, es, el, padre, de, s(_)], [flag_padre], [6]).
template([eliza, quien, es, la, madre, de, s(_)], [flag_madre], [6]).
template([eliza, quien, es, el, tio, de, s(_)], [flag_tio], [6]).
template([eliza, quien, es, la, tia, de, s(_)], [flag_tia], [6]).
template([eliza, quienes, son, los, hermanos, de, s(_)], [flag_bros], [6]).
template([eliza, quienes, son, los, tios, de, s(_)], [flag_tios], [6]).
template([eliza, quienes, son, los, cunados, de, s(_)], [flag_cunados], [6]).
template([eliza, quienes, son, los, primos, de, s(_)], [flag_primos], [6]).
template([eliza, quien, es, el, cunado, de, s(_)], [flag_cunado], [6]).
template([eliza, quien, es, la, cunada, de, s(_)], [flag_cunada], [6]).
template([eliza, quien, es, hermano, de, s(_)], [flag_bro], [5]).
template([eliza, quien, es, hermana, de, s(_)], [flag_sis], [5]).
template([eliza, quien, es, hijo, de, s(_)], [flag_hijo], [5]).
template([eliza, quien, es, tio, de, s(_)], [flag_tios], [5]).
template([eliza, quien, es, cunado, de, s(_)], [flag_cunado], [5]).
template([eliza, quien, es, cunada, de, s(_)], [flag_cunada], [5]).
template([eliza, quienes, son, cunados, de, s(_)], [flag_cunados], [5]).
template([eliza, quienes, son, primos, de, s(_)], [flag_primos], [5]).


template([quien, es, el, abuelo, paterno, de, s(_)], [flag_pat_abuelo], [6]).
template([quien, es, el, abuelo, materno, de, s(_)], [flag_mat_abuelo], [6]).
template([quien, es, la, abuela, paterna, de, s(_)], [flag_pat_abuela], [6]).
template([quien, es, la, abuela, materna, de, s(_)], [flag_mat_abuela], [6]).
template([quienes, son, los, abuelos, de, s(_)], [flag_abuelos], [5]).
template([quien, es, el, hijo, de, s(_)], [flag_hijo], [5]).
template([quien, es, el, padre, de, s(_)], [flag_padre], [5]).
template([quien, es, la, madre, de, s(_)], [flag_madre], [5]).
template([quien, es, el, tio, de, s(_)], [flag_tio], [5]).
template([quien, es, la, tia, de, s(_)], [flag_tia], [5]).
template([quienes, son, los, cunados, de, s(_)], [flag_cunados], [6]).
template([quienes, son, los, hermanos, de, s(_)], [flag_bros], [5]).
template([quienes, son, los, tios, de, s(_)], [flag_tios], [5]).
template([quienes, son, los, primos, de, s(_)], [flag_primos], [5]).
template([quien, es, el, cunado, de, s(_)], [flag_cunado], [5]).
template([quien, es, la, cunada, de, s(_)], [flag_cunada], [5]).
template([quien, es, hermano, de, s(_)], [flag_bro], [4]).
template([quien, es, hermana, de, s(_)], [flag_sis], [4]).
template([quien, es, hijo, de, s(_)], [flag_hijo], [4]).
template([quien, es, tio, de, s(_)], [flag_tios], [4]).
template([quien, es, cunado, de, s(_)], [flag_cunado], [4]).
template([quien, es, cunada, de, s(_)], [flag_cunada], [4]).
template([quienes, son, cunados, de, s(_)], [flag_cunados], [4]).
template([quienes, son, primos, de, s(_)], [flag_primos], [4]).


template(_, ['Por favor, explica un poco más.'], []).

% Base de datos
hombre(mauricio).
hombre(gabriel).
hombre(don_gabriel).
hombre(juan_carlos).
hombre(gerardo).
hombre(omar).
hombre(arturo).
hombre(claudio).
hombre(papaSylvia).
hombre(papaSylvia).
hombre(christian).
hombre(mauricioJr).
hombre(gabito).
hombre(benjamin).
hombre(juan_carlitos).
hombre(gerardoJr).
hombre(arturito).
hombre(claudito).
mujer(sylvia).
mujer(chayo).
mujer(maricruz).
mujer(carmina).
mujer(montse).
mujer(nancy).
mujer(marilu).
mujer(monica).
mujer(abuelaSylvia).
mujer(daniella).
mujer(almendra).
mujer(luciana).
mujer(lucy).
mujer(sylvia).

padre(mauricio).
padre(gabriel).
padre(don_gabriel).
padre(juan_carlos).
padre(gerardo).
padre(omar).
padre(arturo).
padre(claudio).
padre(papaSylvia).
padre(papaClaudio).
padre(papaChayo).
padre(papaCarmina).
padre(papaMontse).
padre(papaNancy).
madre(sylvia).
madre(chayo).
madre(maricruz).
madre(carmina).
madre(montse).
madre(nancy).
madre(marilu).
madre(monica).
madre(abuelaSylvia).
madre(abuelaSylvia).
madre(mamaClaudio).
madre(mamaChayo).
madre(mamaCarmina).
madre(mamaMontse).
madre(mamaNancy).

esposode(don_gabriel, maricruz).
esposode(papaSylvia, abuelaSylvia).
esposode(papaClaudio, mamaClaudio).
esposode(papaChayo, mamaChayo).
esposode(papaCarmina, mamaCarmina).
esposode(papaMontse, mamaMontse).
esposode(papaNancy, mamaNancy).
esposode(mauricio, sylvia).
esposode(gabriel, chayo).
esposode(juan_carlos, carmina).
esposode(gerardo, marilu).
esposode(omar, nancy).
esposode(claudio, monica).

padrede(mauricio, christian).
padrede(mauricio, mauricioJr).
padrede(mauricio, daniella).
padrede(gabriel, gabito).
padrede(gabriel, benjamin).
padrede(gabriel, almendra).
padrede(don_gabriel, mauricio).
padrede(don_gabriel, gabriel).
padrede(don_gabriel, juan_carlos).
padrede(don_gabriel, gerardo).
padrede(don_gabriel, omar).
padrede(don_gabriel, monica).
padrede(don_gabriel, arturo).
padrede(juan_carlos, juan_carlitos).
padrede(gerardo, luciana).
padrede(gerardo, gerardoJr).
padrede(omar, lucy).
padrede(arturo, arturito).
padrede(claudio, claudito).
padrede(papaSylvia, sylvia).
padrede(papaClaudio, claudio).
padrede(papaChayo, chayo).
padrede(papaCarmina, carmina).
padrede(papaMontse, montse).
padrede(papaNancy, nancy).


madrede(sylvia, christian).
madrede(sylvia, mauricioJr).
madrede(sylvia, daniella).
madrede(chayo, gabito).
madrede(chayo, benjamin).
madrede(chayo, almendra).
madrede(maricruz, mauricio).
madrede(maricruz, gabriel).
madrede(maricruz, juan_carlos).
madrede(maricruz, gerardo).
madrede(maricruz, monica).
madrede(maricruz, omar).
madrede(maricruz, arturo).
madrede(carmina, juan_carlitos).
madrede(montse, luciana).
madrede(montse, gerardoJr).
madrede(nancy, lucy).
madrede(marilu, arturito).
madrede(abuelaSylvia, sylvia).
madrede(mamaClaudio, claudio).
madrede(mamaChayo, chayo).
madrede(mamaCarmina, carmina).
madrede(mamaMontse, montse).
madrede(mamaNancy, nancy).


abuelo(X,Y):-(padrede(X,Z), padrede(Z,Y));(padrede(X,Z), madrede(Z,Y)).
abuela(X,Y):-(madrede(X,Z), madrede(Z,Y));(madrede(X,Z), padrede(Z,Y)).


hermanos(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    X \= Y.

hermanode(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    hombre(Y),
    X \= Y.

hermanade(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    mujer(Y),
    X \= Y.

cunado(X,Y):-
    padrede(A, X),
    padrede(B, Y),
    A\=B,
    padre(X), (madre(Y);padre(Y)),
    \+ esposode(X,Y),
    \+ hermanos(X,Y).

cunada(X,Y):-
    madrede(A, X),
    padrede(B, Y),
    A\=B,
    madre(X), (madre(Y);padre(Y)),
    \+ esposode(Y,X),
    \+ hermanos(X,Y).


tio(X,Y):-
    hombre(X),
    (padrede(Z,Y), hermanode(X,Z));
    (madrede(Z,Y), hermanode(X,Z));
    (esposode(X,Z), (padrede(K,Y);madrede(K,Y)), hermanade(K, Z)).

tia(X,Y):-
    mujer(X),
    (madrede(Z,Y), hermanade(Z,X));
    (padrede(Z,Y), hermanade(Z,X));
    (esposode(Z,X), padrede(K,Y), hermanode(Z, K)).

tios(X,Y):-
    tio(X,Y);
    tia(X,Y).

primos(X,Y):-
    tio(Z,X),
    padrede(Z,Y).

abuelos_paternos(X,Y):-
    (padrede(X,Z), padrede(Z,Y));
    (madrede(X,Z), padrede(Z,Y)).

abuelos_maternos(X,Y):-
    (padrede(X,Z), madrede(Z,Y));
    (madrede(X,Z), madrede(Z,Y)).

abuelo_paterno(X,Y):-
    hombre(X),
    abuelos_paternos(X,Y), !.

abuelo_materno(X,Y):-
    hombre(X),
    abuelos_maternos(X,Y), !.

abuela_paterna(X,Y):-
    mujer(X),
    abuelos_paternos(X,Y), !.

abuela_materna(X,Y):-
    mujer(X),
    abuelos_maternos(X,Y), !.



% Coincidencias
match([], []).
match([S|Stim], [I|Input]) :-
    atom(S), S == I,
    match(Stim, Input), !.
match([S|Stim], [_|Input]) :-
    \+atom(S),
    match(Stim, Input), !.

% Reemplazo en la respuesta
replace0([], _, _, Resp, Resp).
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_hijo | _],
    findall(X, ((padrede(Atom, X));(madrede(Atom, X))), Results),
    format_response('la', 'decendencia', Atom, Results, R), !.

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_padre | _],
    findall(X, (padrede(X, Atom)), Results),
    format_response('el', 'padre', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_madre | _],
    findall(X, (madrede(X, Atom)), Results),
    format_response('la', 'madre', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tio | _],
    findall(X, (tio(X, Atom)), Results),
    format_response('', 'tio', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tia | _],
    findall(X, (tia(X, Atom)), Results),
    format_response('', 'tia', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tios | _],
    findall(X, (tios(X, Atom)), Results),
    format_response('los', 'tios', Atom, Results, R), !.  
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_pat_abuelo | _],
    findall(X, (abuelo_paterno(X, Atom)), Results),
    format_response('el', 'abuelo paterno', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_mat_abuelo | _],
    findall(X, (abuelo_materno(X, Atom)), Results),
    format_response('el', 'abuelo materno', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_pat_abuela | _],
    findall(X, (abuela_paterna(X, Atom)), Results),
    format_response('el', 'abuela paterna', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_mat_abuela | _],
    findall(X, (abuela_materna(X, Atom)), Results),
    format_response('el', 'abuela materna', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_abuelos | _],
    findall(X, (abuela(X, Atom);abuelo(X, Atom)), Results),
    format_response('los', 'abuelos', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_bros | _],
    findall(X, (hermanos(X, Atom)), Results),
    format_response('los','hermanos', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_bro | _],
    findall(X, (hermanode(Atom, X)), Results),
    format_response('','hermano', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_sis | _],
    findall(X, (hermanade(Atom, X)), Results),
    format_response('','hermana', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunado | _],
    findall(X, (cunado(X, Atom)), Results),
    format_response('el', 'cunado', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunada | _],
    findall(X, (cunada(X, Atom)), Results),
    format_response('la', 'cunada', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunados | _],
    findall(X, (cunada(X, Atom);cunado(X, Atom)), Results),
    format_response('los', 'cunados', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_primos | _],
    findall(X, (primos(X, Atom)), Results),
    format_response('los', 'primos', Atom, Results, R), !.

replace0([I|Index], Input, N, Resp, R) :-
    nth0(I, Input, Atom),
    select(N, Resp, Atom, R1),
    N1 is N + 1,
    replace0(Index, Input, N1, R1, R), !.

% Lectura de línea como lista
read_line_as_list(Input) :-
    read_line_to_string(user_input, String),
    split_string(String, " ", "", InputList),
    maplist(atom_string, Input, InputList).

format_response(Gen, Category, Person, Results, R) :-
    ( Results \= [] ->
        atomic_list_concat(Results, ', ', ResultsStr),
        writeln("Hola!!"),
        format(atom(R), '~w ~w de ~w: ~w.', [Gen, Category, Person, ResultsStr])
    ;
        format(atom(R), 'Sorry! no encuentro nada de ~w ~w de ~w.', [Gen, Category, Person])
    ).
