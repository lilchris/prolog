eliza :-
    writeln('Hola, mi nombre es Eliza, tu chatbot.'),
    writeln('Por favor, ingresa tu consulta (usar solo minúsculas sin punto al final):'),
    read_line_as_list(Input),
    eliza(Input), !.

%% Caso de salida: el usuario dice "adios"
eliza(Input) :-
    maplist(downcase_atom, Input, LowerInput),
    LowerInput = ['adios'],
    writeln('Adios. Espero poder haberte ayudado.'), !.

% Respuesta por defecto
eliza(Input) :-
    template(Stim, Resp, IndStim),
    match(Stim, Input),
    % Si se encuentra un template, procesar la respuesta
    replace0(IndStim, Input, 0, Resp, R),
    writeln(R),
    read_line_as_list(Input1),
    eliza(Input1), !.

%       Templates definidos
%Familia
template([eliza, quien, es, el, abuelo, paterno, de, s(_)], [flag_pat_abuelo], [7]).
template([eliza, quien, es, el, abuelo, materno, de, s(_)], [flag_mat_abuelo], [7]).
template([eliza, quien, es, la, abuela, paterna, de, s(_)], [flag_pat_abuela], [7]).
template([eliza, quien, es, la, abuela, materna, de, s(_)], [flag_mat_abuela], [7]).
template([eliza, quienes, son, los, abuelos, de, s(_)], [flag_abuelos], [6]).
template([eliza, quien, es, el, hijo, de, s(_)], [flag_hijo], [6]).
template([eliza, quien, es, el, padre, de, s(_)], [flag_padre], [6]).
template([eliza, quien, es, la, madre, de, s(_)], [flag_madre], [6]).
template([eliza, quien, es, el, tio, de, s(_)], [flag_tio], [6]).
template([eliza, quien, es, la, tia, de, s(_)], [flag_tia], [6]).
template([eliza, quienes, son, los, hermanos, de, s(_)], [flag_bros], [6]).
template([eliza, quienes, son, los, tios, de, s(_)], [flag_tios], [6]).
template([eliza, quienes, son, los, cunados, de, s(_)], [flag_cunados], [6]).
template([eliza, quienes, son, los, primos, de, s(_)], [flag_primos], [6]).
template([eliza, quien, es, el, cunado, de, s(_)], [flag_cunado], [6]).
template([eliza, quien, es, la, cunada, de, s(_)], [flag_cunada], [6]).
template([eliza, quien, es, hermano, de, s(_)], [flag_bro], [5]).
template([eliza, quien, es, hermana, de, s(_)], [flag_sis], [5]).
template([eliza, quien, es, hijo, de, s(_)], [flag_hijo], [5]).
template([eliza, quien, es, tio, de, s(_)], [flag_tios], [5]).
template([eliza, quien, es, cunado, de, s(_)], [flag_cunado], [5]).
template([eliza, quien, es, cunada, de, s(_)], [flag_cunada], [5]).
template([eliza, quienes, son, cunados, de, s(_)], [flag_cunados], [5]).
template([eliza, quienes, son, primos, de, s(_)], [flag_primos], [5]).


template([quien, es, el, abuelo, paterno, de, s(_)], [flag_pat_abuelo], [6]).
template([quien, es, el, abuelo, materno, de, s(_)], [flag_mat_abuelo], [6]).
template([quien, es, la, abuela, paterna, de, s(_)], [flag_pat_abuela], [6]).
template([quien, es, la, abuela, materna, de, s(_)], [flag_mat_abuela], [6]).
template([quienes, son, los, abuelos, de, s(_)], [flag_abuelos], [5]).
template([quien, es, el, hijo, de, s(_)], [flag_hijo], [5]).
template([quien, es, el, padre, de, s(_)], [flag_padre], [5]).
template([quien, es, la, madre, de, s(_)], [flag_madre], [5]).
template([quien, es, el, tio, de, s(_)], [flag_tio], [5]).
template([quien, es, la, tia, de, s(_)], [flag_tia], [5]).
template([quienes, son, los, cunados, de, s(_)], [flag_cunados], [6]).
template([quienes, son, los, hermanos, de, s(_)], [flag_bros], [5]).
template([quienes, son, los, tios, de, s(_)], [flag_tios], [5]).
template([quienes, son, los, primos, de, s(_)], [flag_primos], [5]).
template([quien, es, el, cunado, de, s(_)], [flag_cunado], [5]).
template([quien, es, la, cunada, de, s(_)], [flag_cunada], [5]).
template([quien, es, hermano, de, s(_)], [flag_bro], [4]).
template([quien, es, hermana, de, s(_)], [flag_sis], [4]).
template([quien, es, hijo, de, s(_)], [flag_hijo], [4]).
template([quien, es, tio, de, s(_)], [flag_tios], [4]).
template([quien, es, cunado, de, s(_)], [flag_cunado], [4]).
template([quien, es, cunada, de, s(_)], [flag_cunada], [4]).
template([quienes, son, cunados, de, s(_)], [flag_cunados], [4]).
template([quienes, son, primos, de, s(_)], [flag_primos], [4]).

%Aquinator
template([eliza, cual, es, el, consumo, de, energia, de, s(_)], [flag_energia], [8]).
template([eliza, que, consola, es, mas, nueva, s(_), o, s(_)], [flag_mas_nuevo], [6,8]). 
template([eliza, que, consola, es, mas, antigua, s(_), o, s(_)], [flag_mas_viejo], [6,8]). 
template([eliza, cual, es, la, consola, mas, veloz], [flag_mas_veloz], [6]).
template([eliza, en, que, anho, se, lanza, s(_)], [flag_year], [6]).
template([eliza, cual, es, el, consumo, de, energia, de, s(_)], [flag_year], [6]).
template([eliza, quien, es, mas, rapido, s(_), o, s(_)], [flag_mas_rapido], [5,7]).
template([eliza, quien, es, mas, lento, s(_), o, s(_)], [flag_mas_lento], [5,7]).
template([eliza, que, procesador, tiene, el, s(_)], [flag_procesador], [5]).
template([eliza, que, velocidad, tiene, el, s(_)], [flag_velocidad], [5]).
template([eliza, que, consolas, tiene, s(_)], [flag_consolas], [4]).
template([eliza, que, procesadores, tiene, s(_)], [flag_procesadores], [4]).
template([eliza, que, procesadores, usa, s(_)], [flag_procesadores], [4]).
template([eliza, cuales, procesadores, tiene, s(_)], [flag_procesadores], [4]).
template([eliza, cuales, procesadores, usa, s(_)], [flag_procesadores], [4]).
template([eliza, cuales, companias, s(_)], [flag_compania], [3]).


template([cual, es, el, consumo, de, energia, de, s(_)], [flag_energia], [7]).
template([cual, es, la, consola, mas, veloz], [flag_mas_veloz], [5]).
template([en, que, anho, se, lanza, s(_)], [flag_year], [5]).
template([que, procesador, tiene, el, s(_)], [flag_procesador], [4]).
template([que, velocidad, tiene, el, s(_)], [flag_velocidad], [4]).
template([que, consolas, tiene, s(_)], [flag_consolas], [3]).
template([que, procesadores, tiene, s(_)], [flag_procesadores], [3]).
template([que, procesadores, usa, s(_)], [flag_procesadores], [3]).
template([cuales, procesadores, tiene, s(_)], [flag_procesadores], [3]).
template([cuales, procesadores, usa, s(_)], [flag_procesadores], [3]).
template([cuales, companias, s(_)], [flag_compania], [2]).

%Acertijo
template([eliza, resuelve, el, acertijo, de, los, medicos], [flag_acertijo], [6]).
template([eliza, cual, es, el, hospital, de, s(_)], [flag_hospital], [6]).
template([eliza, quien, trabaja, en, el, hospital, s(_)], [flag_quien_hosp], [6]).
template([eliza, a, quien, le, interesa, la, s(_)], [flag_quien_interes], [6]).
template([eliza, que, le, interesa, a, s(_)], [flag_que_interes], [5]).
template([eliza, que, instrumento, utiliza, s(_)], [flag_que_instrumento], [4]).
template([eliza, que, equipo, utiliza, s(_)], [flag_que_instrumento], [4]).
template([eliza, quien, utiliza, el, s(_)], [flag_quien_instrumeto], [4]).
template([eliza, en, donde, trabaja, s(_)], [flag_quien_hosp], [4]).
template([eliza, quien, estudio, s(_)], [flag_quien_esp], [3]).
template([eliza, que, estudio, s(_)], [flag_que_esp], [3]).


template([resuelve, el, acertijo, de, los, medicos], [flag_acertijo], [5]).
template([cual, es, el, hospital, de, s(_)], [flag_hospital], [5]).
template([quien, trabaja, en, el, hospital, s(_)], [flag_quien_hosp], [5]).
template([a, quien, le, interesa, la, s(_)], [flag_quien_interes], [5]).
template([que, le, interesa, a, s(_)], [flag_que_interes], [4]).
template([en, donde, trabaja, s(_)], [flag_quien_hosp], [3]).
template([que, instrumento, utiliza, s(_)], [flag_que_instrumento], [3]).
template([que, equipo, utiliza, s(_)], [flag_que_instrumento], [3]).
template([quien, utiliza, el, s(_)], [flag_quien_instrumeto], [3]).
template([quien, estudio, s(_)], [flag_quien_esp], [2]).
template([que, estudio, s(_)], [flag_que_esp], [2]).

%gustos
template([eliza, te, gustan, las, s(_)], [flagLike], [4]).
template([eliza, te, gustan, los, s(_)], [flagLike], [4]).
template([eliza, que, te, gusta], [flagLikes], [3]).
template([eliza, que, te, gusta, _], [flagLikes], [3]).


template([te, gustan, las, s(_)], [flagLike], [3]).
template([te, gustan, los, s(_)], [flagLike], [3]).
template([que, te, gusta], [flagLikes], [2]).
template([que, te, gusta, _], [flagLikes], [2]).

template(_, ['Por favor, explica un poco más.'], []).

% Base de datos
%Familia

hombre(mauricio).
hombre(gabriel).
hombre(don_gabriel).
hombre(juan_carlos).
hombre(gerardo).
hombre(omar).
hombre(arturo).
hombre(claudio).
hombre(papaSylvia).
hombre(papaSylvia).
hombre(christian).
hombre(mauricioJr).
hombre(gabito).
hombre(benjamin).
hombre(juan_carlitos).
hombre(gerardoJr).
hombre(arturito).
hombre(claudito).
mujer(sylvia).
mujer(chayo).
mujer(maricruz).
mujer(carmina).
mujer(montse).
mujer(nancy).
mujer(marilu).
mujer(monica).
mujer(abuelaSylvia).
mujer(daniella).
mujer(almendra).
mujer(luciana).
mujer(lucy).
mujer(sylvia).

padre(mauricio).
padre(gabriel).
padre(don_gabriel).
padre(juan_carlos).
padre(gerardo).
padre(omar).
padre(arturo).
padre(claudio).
padre(papaSylvia).
padre(papaClaudio).
padre(papaChayo).
padre(papaCarmina).
padre(papaMontse).
padre(papaNancy).
madre(sylvia).
madre(chayo).
madre(maricruz).
madre(carmina).
madre(montse).
madre(nancy).
madre(marilu).
madre(monica).
madre(abuelaSylvia).
madre(abuelaSylvia).
madre(mamaClaudio).
madre(mamaChayo).
madre(mamaCarmina).
madre(mamaMontse).
madre(mamaNancy).

esposode(don_gabriel, maricruz).
esposode(papaSylvia, abuelaSylvia).
esposode(papaClaudio, mamaClaudio).
esposode(papaChayo, mamaChayo).
esposode(papaCarmina, mamaCarmina).
esposode(papaMontse, mamaMontse).
esposode(papaNancy, mamaNancy).
esposode(mauricio, sylvia).
esposode(gabriel, chayo).
esposode(juan_carlos, carmina).
esposode(gerardo, marilu).
esposode(omar, nancy).
esposode(claudio, monica).

padrede(mauricio, christian).
padrede(mauricio, mauricioJr).
padrede(mauricio, daniella).
padrede(gabriel, gabito).
padrede(gabriel, benjamin).
padrede(gabriel, almendra).
padrede(don_gabriel, mauricio).
padrede(don_gabriel, gabriel).
padrede(don_gabriel, juan_carlos).
padrede(don_gabriel, gerardo).
padrede(don_gabriel, omar).
padrede(don_gabriel, monica).
padrede(don_gabriel, arturo).
padrede(juan_carlos, juan_carlitos).
padrede(gerardo, luciana).
padrede(gerardo, gerardoJr).
padrede(omar, lucy).
padrede(arturo, arturito).
padrede(claudio, claudito).
padrede(papaSylvia, sylvia).
padrede(papaClaudio, claudio).
padrede(papaChayo, chayo).
padrede(papaCarmina, carmina).
padrede(papaMontse, montse).
padrede(papaNancy, nancy).


madrede(sylvia, christian).
madrede(sylvia, mauricioJr).
madrede(sylvia, daniella).
madrede(chayo, gabito).
madrede(chayo, benjamin).
madrede(chayo, almendra).
madrede(maricruz, mauricio).
madrede(maricruz, gabriel).
madrede(maricruz, juan_carlos).
madrede(maricruz, gerardo).
madrede(maricruz, monica).
madrede(maricruz, omar).
madrede(maricruz, arturo).
madrede(carmina, juan_carlitos).
madrede(montse, luciana).
madrede(montse, gerardoJr).
madrede(nancy, lucy).
madrede(marilu, arturito).
madrede(abuelaSylvia, sylvia).
madrede(mamaClaudio, claudio).
madrede(mamaChayo, chayo).
madrede(mamaCarmina, carmina).
madrede(mamaMontse, montse).
madrede(mamaNancy, nancy).


abuelo(X,Y):-(padrede(X,Z), padrede(Z,Y));(padrede(X,Z), madrede(Z,Y)).
abuela(X,Y):-(madrede(X,Z), madrede(Z,Y));(madrede(X,Z), padrede(Z,Y)).


hermanos(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    X \= Y.

hermanode(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    hombre(Y),
    X \= Y.

hermanade(X,Y):- 
    padrede(P,X), padrede(P,Y), 
    madrede(M,X), madrede(M,Y), 
    mujer(Y),
    X \= Y.

cunado(X,Y):-
    padrede(A, X),
    padrede(B, Y),
    A\=B,
    padre(X), (madre(Y);padre(Y)),
    \+ esposode(X,Y),
    \+ hermanos(X,Y).

cunada(X,Y):-
    madrede(A, X),
    padrede(B, Y),
    A\=B,
    madre(X), (madre(Y);padre(Y)),
    \+ esposode(Y,X),
    \+ hermanos(X,Y).


tio(X,Y):-
    hombre(X),
    (padrede(Z,Y), hermanode(X,Z));
    (madrede(Z,Y), hermanode(X,Z));
    (esposode(X,Z), (padrede(K,Y);madrede(K,Y)), hermanade(K, Z)).

tia(X,Y):-
    mujer(X),
    (madrede(Z,Y), hermanade(Z,X));
    (padrede(Z,Y), hermanade(Z,X));
    (esposode(Z,X), padrede(K,Y), hermanode(Z, K)).

tios(X,Y):-
    tio(X,Y);
    tia(X,Y).

primos(X,Y):-
    tio(Z,X),
    padrede(Z,Y).

abuelos_paternos(X,Y):-
    (padrede(X,Z), padrede(Z,Y));
    (madrede(X,Z), padrede(Z,Y)).

abuelos_maternos(X,Y):-
    (padrede(X,Z), madrede(Z,Y));
    (madrede(X,Z), madrede(Z,Y)).

abuelo_paterno(X,Y):-
    hombre(X),
    abuelos_paternos(X,Y), !.

abuelo_materno(X,Y):-
    hombre(X),
    abuelos_maternos(X,Y), !.

abuela_paterna(X,Y):-
    mujer(X),
    abuelos_paternos(X,Y), !.

abuela_materna(X,Y):-
    mujer(X),
    abuelos_maternos(X,Y), !.

%Termina Familia


%Aquinator

compania(nintendo).
compania(microsoft).
compania(sony).
compania(asus).
compania(otra).

%consolas
consola(nintendo, nintendoGameCube).
consola(nintendo, nintendo64).
consola(nintendo, superNintendoEntertainmentSystem).
consola(nintendo, wii).
consola(microsoft,xbox).
consola(microsoft,xboxOne).
consola(microsoft,xbox360).
consola(microsoft,xboxSeriesX).
consola(sony,playStation1).
consola(sony,playStation2).
consola(sony,playStation3).
consola(sony,playStation4).
consola(sony,playStation5).
consola(asus,asusROGAlly).
consola(asus,asusROGAllyX).
consola(asus,asusROGZephyrus).
consola(asus,asusROGFlowX13).
consola(asus,asusROGFlowZ13).
consola(otra,segaMegaDrive).
consola(otra,bandaiWonderSwan).
consola(otra,atari2600).
consola(otra,gameBoy).

%procesador()
procesador(nintendoGameCube, iBM_PowerPC_Gekko_128-bit).
procesador(nintendo64, nEC_VR4300_64-bit_RISC_processor).
procesador(superNintendoEntertainmentSystem, ricoh_5A22_16-bit).
procesador(wii, iBMPowerPCBroadway).
procesador(xbox, "Intel Pentium III 32-bit architecture").
procesador(xboxOne, "AMD Jaguar APU 8-core 64-bit architecture").
procesador(xbox360, "IBM PowerPC Xenon 3-core 64-bit architecture").
procesador(xboxSeriesX, "AMD Zen 2 8-core 64-bit architecture").
procesador(playStation1,"MIPS R3000A 32-bit architecture").
procesador(playStation2,"MIPS R5900 Emotion Engine 64-bit architecture").
procesador(playStation3,"IBM Cell Broadband Engine 8-core 64-bit architecture").
procesador(playStation4,"AMD Jaguar APU  8-core 64-bit architecture").
procesador(playStation5,"AMD Zen 2  8-core 64-bit architecture").
procesador(asusROGAlly, "AMD Ryzen Z1 APU 8 core 64-bit architecture").
procesador(asusROGAllyX, "AMD Ryzen Z1 Extreme APU 8 core 64-bit architecture").
procesador(asusROGZephyrus, "AMD Ryzen9 64-bit architecture Intel Core i9 processors").
procesador(asusROGFlowX13, "AMD Ryzen 9 5900HS  8-core 64-bit architecture").
procesador(asusROGFlowZ13, "Intel Core i9-12900H   14-core 64-bit architecture").
procesador(segaMegaDrive, "Motorola 68000 16-bit architecture").
procesador(bandaiWonderSwan, "Zilog Z80 8-bit architecture").
procesador(atari2600, "MOS Technology 6507 8-bit architecture").
procesador(gameBoy, "Sharp LR35902 8-bit architecture").

%year()
year(nintendoGameCube,2001).
year(nintendo64,1996).
year(superNintendoEntertainmentSystem,"1990 en Japon").
year(superNintendoEntertainmentSystem,"1991 en Norte America").
year(wii,2006).
year(xbox, 2001).
year(xboxOne, 2013).
year(xbox360, 2005).
year(xboxSeriesX, 2020).
year(playStation1, "1994 en Japon").
year(playStation1, "1995 en Norte America").
year(playStation2, 2000).
year(playStation3, 2006).
year(playStation4, 2013).
year(playStation5, 2020).
year(asusROGAlly, 2023).
year(asusROGAllyX, 2023).
year(asusROGZephyrus, 2017).
year(asusROGFlowX13, 2021).
year(asusROGFlowZ13, 2022).
year(segaMegaDrive, "1988 en Japon").
year(segaMegaDrive, "1989 en Norte America").
year(bandaiWonderSwan, 1999).
year(atari2600, 1997).
year(gameBoy, 1989).

%velocidad() MHz
velocidad(nintendoGameCube, 485).
velocidad(nintendo64, 93.75).
velocidad(superNintendoEntertainmentSystem, 3.58).
velocidad(wii, 729).
velocidad(xbox, 733).
velocidad(xboxOne, 1750).
velocidad(xbox360, 3200).
velocidad(xboxSeriesX, 3800).
velocidad(playStation1, 33.87).
velocidad(playStation2, 294.9).
velocidad(playStation3, 3200).
velocidad(playStation4, 1600).
velocidad(playStation5, 3500).
velocidad(asusROGAlly, 4700).
velocidad(asusROGAllyX, 5100).
velocidad(asusROGZephyrus, 3200).
velocidad(asusROGFlowX13, 4300).
velocidad(asusROGFlowZ13, 5000).
velocidad(segaMegaDrive, 7.61).
velocidad(bandaiWonderSwan, 3.2).
velocidad(atari2600, 1.19).
velocidad(gameBoy, 4.19).

%consumo() watts
consumo(nintendoGameCube, 39).
consumo(nintendo64, 15).
consumo(superNintendoEntertainmentSystem, 17).
consumo(wii, 20).
consumo(wii, "9 a 10 watts sin jugar").
consumo(xbox, 100).
consumo(xboxOne, 70).
consumo(xboxOne, 120).
consumo(xbox360, 100).
consumo(xbox360, 175).
consumo(xboxSeriesX, 180).
consumo(playStation1,10).
consumo(playStation2,48).
consumo(playStation3,170).
consumo(playStation4,165).
consumo(playStation5,220).
consumo(asusROGAlly, 15).
consumo(asusROGAllyX, 15).
consumo(asusROGZephyrus, 150).
consumo(asusROGFlowX13, 65).
consumo(asusROGFlowZ13, 60).
consumo(segaMegaDrive, 10).
consumo(bandaiWonderSwan, 2).
consumo(atari2600, 4).
consumo(gameBoy, 0.25).

mas_veloz(Consola, Velocidad) :-
    setof([V, C], velocidad(C, V), ResultadosOrdenados), 
    last(ResultadosOrdenados, [Velocidad, Consola]).  

comparar_velocidad(C1, C2) :-
    velocidad(C1, V1),
    velocidad(C2, V2),
    ( V1 > V2 ->
        format( "~w (~w MHz) es más veloz que ~w (~w MHz).~n", [C1, V1, C2, V2])
    ; format( "~w (~w MHz) es más veloz que ~w (~w MHz).~n", [C2, V2, C1, V1])
    ). 
    
comparar_lentitud(C1, C2) :-
    velocidad(C1, V1),
    velocidad(C2, V2),
    ( V1 < V2 ->
        format( "~w (~w MHz) es más lento que ~w (~w MHz).~n", [C1, V1, C2, V2])
    ; format( "~w (~w MHz) es más lento que ~w (~w MHz).~n", [C2, V2, C1, V1])
    ). 

comparar_modernidad(C1, C2) :-
    year(C1, V1),
    year(C2, V2),
    ( V1 > V2 ->
        format( "~w (de anho ~w) es más nuevo que ~w (de anho ~w).~n", [C1, V1, C2, V2])
    ; format( "~w (de anho ~w) es más nuevo que ~w (de anho ~w).~n", [C2, V2, C1, V1])
    ).

comparar_vejez(C1, C2) :-
    year(C1, V1),
    year(C2, V2),
    ( V1 < V2 ->
        format( "~w (de anho ~w) es más antiguo que ~w (de anho ~w).~n", [C1, V1, C2, V2])
    ; format( "~w (de anho ~w) es más antiguo que ~w (de anho ~w).~n", [C2, V2, C1, V1])
    ).

%Termina Aquinator

%Acertijo de los medicos

medicos(Medicos) :-
    Medicos = [ 
        medico(ana, E1, H1, EQ1, I1),
        medico(bruno, E2, H2, EQ2, I2),
        medico(carla, E3, H3, EQ3, I3),
        medico(diego, E4, H4, EQ4, I4),
        medico(elena, E5, H5, EQ5, I5)
    ],

    Especialidades = [cardiologia, neurologia, oncologia, pediatria, dermatologia],
    Hospitales = [general, regional, universitario, privado, militar],
    Equipos = [ecografo, resonancia, tomografo, dermatoscopio, electrocardiografo],
    Intereses = [genetica, farmacologia, inmunologia, bioetica, microbiologia],

    permutacion(Especialidades, [E1, E2, E3, E4, E5]),
    permutacion(Hospitales, [H1, H2, H3, H4, H5]),
    permutacion(Equipos, [EQ1, EQ2, EQ3, EQ4, EQ5]),
    permutacion(Intereses, [I1, I2, I3, I4, I5]),

    % pista 1
    H3 \= general, H3 \= privado, E3 \= neurologia,
    %pista 2
    member(medico(_, cardiologia, militar, electrocardiografo, _), Medicos),
    \+ member(medico(diego, cardiologia, militar, electrocardiografo, _), Medicos),
    %pista 3
    member(medico(bruno, _, H2, _, farmacologia), Medicos),
    H2 \= regional, H2 \= militar,
    %pista 4
    member(medico(_, pediatria, H4, ecografo, _), Medicos),
    H4 \= universitario, H4 \= militar,
    %pista5
    member(medico(_, oncologia, general, tomografo, _), Medicos),
    %pista 6
    member(medico(_, _, _, resonancia, inmunologia), Medicos),
    \+ member(medico(elena, _, _, resonancia, _), Medicos),
    %pista 7
    member(medico(_, dermatologia, regional, _, _), Medicos),
    %pista 8
    member(medico(elena, _, _, EQ5, bioetica), Medicos),
    EQ5 \= electrocardiografo,
    %pista 9
    member(medico(diego, _, _, _, microbiologia), Medicos),
    %pistilla 10
    member(medico(_, _, universitario, dermatoscopio, _), Medicos),!.

    %format('Ana estudió ~w en el hospital ~w, utiliza un ~w y le interesa la ~w.~n', [E1, H1, EQ1, I1]),
    %format('Bruno estudió ~w en el hospital ~w, utiliza un ~w y le interesa la ~w.~n', [E2, H2, EQ2, I2]),
    %format('Carla estudió ~w en el hospital ~w, utiliza un ~w y le interesa la ~w.~n', [E3, H3, EQ3, I3]),
    %format('Diego estudió ~w en el hospital ~w, utiliza un ~w y le interesa la ~w.~n', [E4, H4, EQ4, I4]),
    %format('Elena estudió ~w en el hospital ~w, utiliza un ~w y le interesa la ~w.~n', [E5, H5, EQ5, I5]),!.


permutacion([], []).
permutacion(L, [H|T]) :- 
    select(H, L, R), 
    permutacion(R, T).


%Termina Acertijo de los medicos

%Gustos

likes(comics).
likes(computadoras).
likes(mujeres).
likes(revistas).
likes(motos).
likes(carros).
likes(deportes).
likes(eventos).
likes(fiestas).
likes(viajes).
likes(criptomonedas).
likes(tacos).

elizaLikes(X, R):- 
    likes(X), 
    format_response('si, me', 'gusta', "pasatiempo", [X], R), !.
elizaLikes(X, R):- 
    \+likes(X), 
    format_response('no, no me', 'gusta', "pasatiempo", [X], R), !.

%Terminan Gustos


% Coincidencias
match([], []).
match([S|Stim], [I|Input]) :-
    atom(S), S == I,
    match(Stim, Input), !.
match([S|Stim], [_|Input]) :-
    \+atom(S),
    match(Stim, Input), !.

%Familia

% Reemplazo en la respuesta
replace0([], _, _, Resp, Resp).
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_hijo | _],
    findall(X, ((padrede(Atom, X));(madrede(Atom, X))), Results),
    format_response('la', 'decendencia', Atom, Results, R), !.

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_padre | _],
    findall(X, (padrede(X, Atom)), Results),
    format_response('el', 'padre', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_madre | _],
    findall(X, (madrede(X, Atom)), Results),
    format_response('la', 'madre', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tio | _],
    findall(X, (tio(X, Atom)), Results),
    format_response('', 'tio', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tia | _],
    findall(X, (tia(X, Atom)), Results),
    format_response('', 'tia', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_tios | _],
    findall(X, (tios(X, Atom)), Results),
    format_response('los', 'tios', Atom, Results, R), !.  
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_pat_abuelo | _],
    findall(X, (abuelo_paterno(X, Atom)), Results),
    format_response('el', 'abuelo paterno', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_mat_abuelo | _],
    findall(X, (abuelo_materno(X, Atom)), Results),
    format_response('el', 'abuelo materno', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_pat_abuela | _],
    findall(X, (abuela_paterna(X, Atom)), Results),
    format_response('el', 'abuela paterna', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_mat_abuela | _],
    findall(X, (abuela_materna(X, Atom)), Results),
    format_response('el', 'abuela materna', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_abuelos | _],
    findall(X, (abuela(X, Atom);abuelo(X, Atom)), Results),
    format_response('los', 'abuelos', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_bros | _],
    findall(X, (hermanos(X, Atom)), Results),
    format_response('los','hermanos', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_bro | _],
    findall(X, (hermanode(Atom, X)), Results),
    format_response('','hermano', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_sis | _],
    findall(X, (hermanade(Atom, X)), Results),
    format_response('','hermana', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunado | _],
    findall(X, (cunado(X, Atom)), Results),
    format_response('el', 'cunado', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunada | _],
    findall(X, (cunada(X, Atom)), Results),
    format_response('la', 'cunada', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_cunados | _],
    findall(X, (cunada(X, Atom);cunado(X, Atom)), Results),
    format_response('los', 'cunados', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_primos | _],
    findall(X, (primos(X, Atom)), Results),
    format_response('los', 'primos', Atom, Results, R), !.

%Termina Familia

%Aquinator

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, _),
    Resp = [flag_compania | _],
    findall(X, (compania(X)), Results),
    format_response('las', 'companias', "videjuegos", Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_consolas | _],
    findall(X, (consola(Atom, X)), Results),
    format_response('las', 'consolas', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_procesador | _],
    findall(X, (procesador(Atom, X)), Results),
    format_response('el', 'procesador', Atom, Results, R), !. 
    replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_energia | _],
    findall(X, (consumo(Atom, X)), Results),
    format_response('el', 'consumo energetico', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_velocidad | _],
    findall(X, (velocidad(Atom, X)), Results),
    format_response('la', 'velocidad en MHz', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_year | _],
    findall(X, (year(Atom, X)), Results),
    format_response('el', 'anho de lanzamiento', Atom, Results, R), !.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, _),
    Resp = [flag_mas_veloz | _],
    setof([V, C], velocidad(C, V), ResultadosOrdenados),
    last(ResultadosOrdenados, [Velocidad, Consola]),
    format(atom(R), "La consola más veloz es ~w con una velocidad de ~w MHz.~n", [Consola, Velocidad])
    , !.
    
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    nth0(7, Input, Mato),
    Resp = [flag_mas_rapido | _],
    findall(_, (comparar_velocidad(Atom, Mato)), _),
    format(atom(R), '', []),!.  
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    nth0(7, Input, Mato),
    Resp = [flag_mas_lento | _],
    findall(_, (comparar_lentitud(Atom, Mato)), _),
    format(atom(R), '', []),!.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    nth0(8, Input, Mato),
    Resp = [flag_mas_nuevo | _],
    findall(_, (comparar_modernidad(Atom, Mato)), _),
    format(atom(R), '', []),!.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    nth0(8, Input, Mato),
    Resp = [flag_mas_viejo | _],
    findall(_, (comparar_vejez(Atom, Mato)), _),
    format(atom(R), '', []),!.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_procesadores | _],
    writeln(Atom),
    findall([X,Y], (consola(Atom, X), procesador(X, Y)), Results),
    forall(member([Consola, Procesador], Results),
           format("~w: ~w~n", [Consola, Procesador])), 
           format(atom(R), '', []),
           !.


%Termina Aquinator

%Acertijo

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, _),
    Resp = [flag_acertijo | _],
    findall(Medicos, medicos(Medicos), Results),
    flatten(Results, Res),
    Res = [ListaMedicos],
    writeln(ListaMedicos),
    format(atom(R), '', []),!.

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_hospital | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Atom, _, Hospital, _, _), ListaMedicos), 
    format_response('el', 'hospital', Atom, [Hospital], R), !.
    %format(atom(R), '', []),!.

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_quien_hosp | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Dr, _, Atom, _, _), ListaMedicos), 
    format_response('atiende el', 'hospital', Atom, [Dr], R), !.
    %format(atom(R), '', []),!. 

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_quien_esp | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Dr, Atom, _, _, _), ListaMedicos), 
    format_response('estudio la', 'carrera', Atom, [Dr], R), !.
    %format(atom(R), '', []),!.
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_que_esp | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Atom, Especialidad, _ , _, _), ListaMedicos), 
    format_response('el', 'hospital', Atom, [Especialidad], R), !.
    %format(atom(R), '', []),!. 
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_que_instrumento | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Atom, _, _ , Instrumento, _), ListaMedicos), 
    format_response('el', 'instrumento', Atom, [Instrumento], R), !.
    %format(atom(R), '', []),!. 
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_quien_instrumeto | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Dr, _, _ , Atom, _), ListaMedicos), 
    format_response('el', 'instrumento', Atom, [Dr], R), !.
    %format(atom(R), '', []),!.     
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_que_interes | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Atom, _, _ , _, Interes), ListaMedicos), 
    format_response('el', 'interes', Atom, [Interes], R), !.
    %format(atom(R), '', []),!. 
replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, Atom),
    Resp = [flag_quien_interes | _],
    findall(Medicos, medicos(Medicos), Results),
    Results = [ListaMedicos],
    member(medico(Dr, _, _ , _, Atom), ListaMedicos), 
    format_response('el', 'interes', Atom, [Dr], R), !.
    %format(atom(R), '', []),!.   
    

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, _),
    Resp = [prototipo | _],
    findall(Medicos, medicos(Medicos), Results),
    writeln(Results),
    Results = [ListaMedicos],
    member(medico(diego, _, Hospital, _, _), ListaMedicos), writeln(Hospital),
    format(atom(R), '', []),!.

%Termina Acertijo

%Gustos

replace0([I|_], Input, _, Resp, R) :-
    nth0(I, Input, _),
    Resp = [flagLikes | _],
    findall(X, (likes(X)), Results), 
    format_response('me', 'gusta', "pasatiempo", Results, R), !.

replace0([I|_], Input, _, Resp, R):-
	nth0(I, Input, Atom),
	nth0(0, Resp, X),
	X == flagLike,
	elizaLikes(Atom, R).

%Terminan Gustos



replace0([I|Index], Input, N, Resp, R) :-
    nth0(I, Input, Atom),
    select(N, Resp, Atom, R1),
    N1 is N + 1,
    replace0(Index, Input, N1, R1, R), !.

% Lectura de línea como lista
read_line_as_list(Input) :-
    read_line_to_string(user_input, String),
    split_string(String, " ", "", InputList),
    maplist(atom_string, Input, InputList).

format_response(Gen, Category, Person, Results, R) :-
    ( Results \= [] ->
        atomic_list_concat(Results, ', ', ResultsStr),
        writeln("Hola!!"),
        format(atom(R), '~w ~w de ~w: ~w.', [Gen, Category, Person, ResultsStr])
    ;
        format(atom(R), 'Sorry! no encuentro nada de ~w ~w de ~w.', [Gen, Category, Person])
    ).
